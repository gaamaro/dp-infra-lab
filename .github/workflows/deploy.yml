name: Deploy EC2 com Terraform

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      ambiente:
        description: "Ambiente de destino"
        required: true
        default: "homelab"

env:
  VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
  VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
  TF_INPUT: false
  TF_IN_AUTOMATION: true

jobs:
  config:
    name: 🔧 Configuração do ambiente
    runs-on: self-hosted

    outputs:
      aws_access_key_id: ${{ steps.export-creds.outputs.aws_access_key_id }}
      aws_secret_access_key: ${{ steps.export-creds.outputs.aws_secret_access_key }}

    steps:
      - name: 📦 Checkout do código
        uses: actions/checkout@v3

      - name: 🧰 Instala Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: 🔐 Exporta AWS credentials do Vault
        id: export-creds
        run: |
          CREDS=$(curl -s --header "X-Vault-Token: $VAULT_TOKEN" \
            --request GET \
            $VAULT_ADDR/v1/kv/data/aws)

          AWS_ACCESS_KEY_ID=$(echo "$CREDS" | jq -r '.data.data.access_key')
          AWS_SECRET_ACCESS_KEY=$(echo "$CREDS" | jq -r '.data.data.secret_key')

          echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> $GITHUB_OUTPUT
          echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_OUTPUT

  plan:
    name: 📋 Terraform Plan
    runs-on: self-hosted
    needs: config

    steps:
      - name: 📦 Checkout do código
        uses: actions/checkout@v3

      - name: 🔐 Configura credenciais e variáveis VAULT
        run: |
          echo "VAULT_ADDR=$VAULT_ADDR" >> $GITHUB_ENV
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ needs.config.outputs.aws_access_key_id }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ needs.config.outputs.aws_secret_access_key }}" >> $GITHUB_ENV

      - name: ⚙️ Terraform Init
        run: terraform init

      - name: 📋 Terraform Plan
        run: >
          terraform plan -out=tfplan.binary
          -var="vault_token=$VAULT_TOKEN"
          -var="vault_addr=$VAULT_ADDR"

      - name: 📦 Armazena plano como artefato
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan.binary

  approve:
    name: ✅ Aprovação manual
    runs-on: ubuntu-latest
    needs: plan
    environment:
      name: homelab
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: 🚩 Esperando aprovação
        run: echo "Aguardando aprovação manual para o apply..."

  apply:
    name: 🚀 Terraform Apply
    runs-on: self-hosted
    needs: [plan, approve]

    steps:
      - name: 📦 Checkout do código
        uses: actions/checkout@v3

      - name: 📅 Baixa plano
        uses: actions/download-artifact@v4
        with:
          name: tfplan

      - name: 🔐 Configura credenciais e variáveis VAULT
        run: |
          echo "VAULT_ADDR=$VAULT_ADDR" >> $GITHUB_ENV
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ needs.config.outputs.aws_access_key_id }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ needs.config.outputs.aws_secret_access_key }}" >> $GITHUB_ENV

      - name: 🚀 Terraform Apply
        run: terraform apply -auto-approve tfplan.binary
