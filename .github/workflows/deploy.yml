name: Deploy EC2 com Terraform

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      ambiente:
        description: "Ambiente de destino"
        required: true
        default: "homelab"

env:
  VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
  VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
  TF_INPUT: false
  TF_IN_AUTOMATION: true

jobs:
  deploy:
    name: 🚀 Deploy EC2 com Terraform
    runs-on: self-hosted

    steps:
      - name: 📦 Checkout do código
        uses: actions/checkout@v3

      - name: 🧰 Instala Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: 🔐 Exporta credenciais do Vault e seta variáveis
        run: |
          echo "🔑 Lendo AWS credentials do Vault..."
          CREDS=$(curl -s --header "X-Vault-Token: $VAULT_TOKEN" \
            --request GET \
            $VAULT_ADDR/v1/kv/data/aws)

          export AWS_ACCESS_KEY_ID=$(echo "$CREDS" | jq -r '.data.data.access_key')
          export AWS_SECRET_ACCESS_KEY=$(echo "$CREDS" | jq -r '.data.data.secret_key')

          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
          echo "✅ Credenciais setadas com sucesso"

      - name: ⚙️ Terraform Init
        run: terraform init

      - name: 🛠️ Garante que a chave SSH está registrada na AWS
        run: |
          set -euo pipefail

          echo "🔐 Buscando chave do Vault..."
          VAULT_SSH=$(curl -s --header "X-Vault-Token: $VAULT_TOKEN" \
            --request GET \
            $VAULT_ADDR/v1/kv/data/ssh-default)

          KEY_NAME=$(echo "$VAULT_SSH" | jq -r '.data.data.key_name')
          PUBLIC_KEY_RAW=$(echo "$VAULT_SSH" | jq -r '.data.data.public_key')
          REGION="${AWS_REGION:-us-east-1}"

          echo "📝 Nome da chave: $KEY_NAME"
          echo "📝 Primeiros caracteres da chave pública: $(echo "$PUBLIC_KEY_RAW" | cut -c1-40)..."
          echo "📝 Região: $REGION"

          if [[ -z "$KEY_NAME" ]] || [[ -z "$PUBLIC_KEY_RAW" ]]; then
            echo "❌ ERRO: KEY_NAME ou PUBLIC_KEY_RAW está vazio!"
            exit 1
          fi

          PUBLIC_KEY_B64=$(echo "$PUBLIC_KEY_RAW" | base64 | tr -d '\n')
          if [[ -z "$PUBLIC_KEY_B64" ]]; then
            echo "❌ ERRO: Falha ao gerar chave pública em base64"
            exit 1
          fi

          echo "🔍 Verificando se a chave '$KEY_NAME' já existe na AWS..."
          if aws ec2 describe-key-pairs --key-names "$KEY_NAME" --region "$REGION" > /dev/null 2>&1; then
            echo "✅ Chave '$KEY_NAME' já existe na AWS."
          else
            echo "🚀 Importando chave '$KEY_NAME' para a AWS..."
            if ! aws ec2 import-key-pair \
              --key-name "$KEY_NAME" \
              --public-key-material "$PUBLIC_KEY_B64" \
              --region "$REGION"; then
                echo "❌ ERRO ao importar o par de chaves para a AWS!"
                echo "🔎 KEY_NAME: $KEY_NAME"
                echo "🔎 PUBLIC_KEY_B64: ${PUBLIC_KEY_B64:0:40}..."
                exit 2
            fi

            echo "⏳ Aguardando a chave ser propagada pela AWS..."
            for i in {1..10}; do
              if aws ec2 describe-key-pairs --key-names "$KEY_NAME" --region "$REGION" > /dev/null 2>&1; then
                echo "✅ Chave '$KEY_NAME' agora está disponível."
                break
              fi
              echo "⏱️ Tentando novamente em 3 segundos..."
              sleep 3
            done
          fi

      - name: 📋 Terraform Plan
        run: terraform plan -out=/tmp/tfplan.binary -var="vault_token=$VAULT_TOKEN" -var="vault_addr=$VAULT_ADDR"

      - name: 🚀 Terraform Apply
        run: terraform apply -auto-approve /tmp/tfplan.binary

      - name: 💾 Salva IP da EC2 no Vault
        run: |
          echo "🔍 Obtendo IP da EC2 do output do Terraform..."
          EC2_IP=$(terraform output -raw ec2_public_ip)
          echo "📝 IP da EC2: $EC2_IP"

          echo "💾 Salvando IP no Vault..."
          curl -s --header "X-Vault-Token: $VAULT_TOKEN" \
            --request POST \
            --data "{\"data\": {\"ec2_ip\": \"$EC2_IP\"}}" \
            $VAULT_ADDR/v1/kv/data/ec2-ip

  install_dynatrace:
    name: 🔄 Instalação do Dynatrace OneAgent
    needs: deploy
    runs-on: self-hosted

    steps:
      - name: 📦 Checkout do código
        uses: actions/checkout@v3

      - name: 🧰 Instala Ansible
        run: |
          echo 'tzdata tzdata/Areas select America' | sudo debconf-set-selections
          echo 'tzdata tzdata/Zones/America select Sao_Paulo' | sudo debconf-set-selections
          sudo apt-get update
          sudo apt-get install -y ansible

      - name: 🔐 Obtém IP da EC2 e chave SSH do Vault
        run: |
          echo "🔍 Obtendo IP da EC2 do Vault..."
          VAULT_EC2=$(curl -s --header "X-Vault-Token: $VAULT_TOKEN" \
            --request GET \
            $VAULT_ADDR/v1/kv/data/ec2-ip)
          
          EC2_IP=$(echo "$VAULT_EC2" | jq -r '.data.data.ec2_ip')
          echo "📝 IP da EC2: $EC2_IP"

          echo "🔐 Obtendo chave SSH do Vault..."
          VAULT_SSH=$(curl -s --header "X-Vault-Token: $VAULT_TOKEN" \
            --request GET \
            $VAULT_ADDR/v1/kv/data/ssh-default)

          PRIVATE_KEY=$(echo "$VAULT_SSH" | jq -r '.data.data.private_key')
          echo "$PRIVATE_KEY" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key

          echo "📋 Criando arquivo de inventory..."
          cat > /tmp/inventory.ini << EOF
          [ec2]
          $EC2_IP ansible_ssh_private_key_file=/tmp/ssh_key ansible_user=ubuntu
          EOF

      - name: 🚀 Executa playbook do Ansible
        run: ansible-playbook -i /tmp/inventory.ini ansible/oneagent.yaml
